#!/usr/bin/env python3
"""
Script de d√©monstration du Surveillance Orchestrator.
Montre les capacit√©s du syst√®me avec une interface interactive.
"""

import sys
from pathlib import Path
from typing import List

from src.orchestrator.controller import SurveillanceOrchestrator
from src.config import settings, ModelType
from src.models import get_available_models
from src.utils.logging import get_surveillance_logger

logger = get_surveillance_logger()


class SurveillanceDemo:
    """Classe de d√©monstration interactive."""
    
    def __init__(self):
        self.orchestrator = None
        self.video_files = self._find_demo_videos()
    
    def _find_demo_videos(self) -> List[Path]:
        """Trouve les vid√©os de d√©monstration disponibles."""
        video_dir = Path("videos")
        if not video_dir.exists():
            return []
        
        extensions = {'.mp4', '.avi', '.mov', '.mkv'}
        videos = []
        
        for ext in extensions:
            videos.extend(video_dir.glob(f"*{ext}"))
        
        return sorted(videos)[:5]  # Max 5 vid√©os pour la demo
    
    def display_welcome(self):
        """Affiche le message de bienvenue."""
        print("="*80)
        print("SURVEILLANCE ORCHESTRATOR - D√âMONSTRATION")
        print("="*80)
        print()
        print("Syst√®me de surveillance intelligente utilisant l'IA")
        print("Analyse automatique de vid√©os de surveillance")
        print("D√©tection de comportements suspects avec VLM + LLM")
        print()
        
        # Affichage de la configuration actuelle
        models = get_available_models()
        primary_model = None
        
        for model_id, info in models.items():
            if info["is_primary"]:
                primary_model = info["name"]
                break
        
        print(f"Mod√®le principal: {primary_model}")
        print(f"M√©moire nettoy√©e apr√®s analyse: {'Oui' if settings.config.cleanup_after_analysis else 'Non'}")
        print()
    
    def display_menu(self):
        """Affiche le menu principal."""
        print("MENU PRINCIPAL")
        print("-" * 30)
        print("1. Analyser une vid√©o")
        print("2. Analyser toutes les vid√©os de d√©mo")
        print("3. Changer de mod√®le VLM")
        print("4. Afficher les statistiques")
        print("5. Test des capacit√©s syst√®me")
        print("6. Quitter")
        print()
    
    def display_videos(self) -> bool:
        """Affiche les vid√©os disponibles."""
        if not self.video_files:
            print("Aucune vid√©o trouv√©e dans le dossier 'videos/'")
            print("Ajoutez des fichiers vid√©o (.mp4, .avi, .mov, .mkv) dans ce dossier")
            return False
        
        print("VID√âOS DISPONIBLES:")
        print("-" * 30)
        for i, video in enumerate(self.video_files, 1):
            size_mb = video.stat().st_size / (1024 * 1024)
            print(f"{i}. {video.name} ({size_mb:.1f} MB)")
        print()
        return True
    
    def choose_video(self) -> Path:
        """Permet √† l'utilisateur de choisir une vid√©o."""
        if not self.display_videos():
            return None
        
        while True:
            try:
                choice = input("Choisissez une vid√©o (num√©ro) ou 'q' pour retour: ").strip()
                
                if choice.lower() == 'q':
                    return None
                
                idx = int(choice) - 1
                if 0 <= idx < len(self.video_files):
                    return self.video_files[idx]
                else:
                    print("Choix invalide. Essayez encore.")
                    
            except ValueError:
                print("‚ùå Veuillez entrer un num√©ro valide.")
    
    def get_analysis_params(self):
        """R√©cup√®re les param√®tres d'analyse de l'utilisateur."""
        print("‚öôÔ∏è  PARAM√àTRES D'ANALYSE")
        print("-" * 30)
        
        sections = ["Rayon cosm√©tique", "Entr√©e principale", "Caisse", "Rayon √©lectronique", "Sortie"]
        times = ["Matin", "Apr√®s-midi", "Fin d'apr√®s-midi", "Soir√©e"]
        densities = ["faible", "mod√©r√©e", "dense"]
        
        print("Sections disponibles:", ", ".join(sections))
        section = input(f"Section (d√©faut: {sections[0]}): ").strip() or sections[0]
        
        print("Moments disponibles:", ", ".join(times))
        time_of_day = input(f"Moment (d√©faut: {times[2]}): ").strip() or times[2]
        
        print("Affluence disponible:", ", ".join(densities))
        crowd_density = input(f"Affluence (d√©faut: {densities[2]}): ").strip() or densities[2]
        
        keyframes = input("Utiliser l'extraction intelligente de keyframes? (y/N): ").strip().lower() == 'y'
        
        return section, time_of_day, crowd_density, keyframes
    
    def analyze_single_video(self):
        """Analyse une seule vid√©o choisie par l'utilisateur."""
        video = self.choose_video()
        if not video:
            return
        
        section, time_of_day, crowd_density, keyframes = self.get_analysis_params()
        
        print(f"\nüé¨ ANALYSE DE: {video.name}")
        print("=" * 50)
        
        if not self.orchestrator:
            self.orchestrator = SurveillanceOrchestrator()
        
        result = self.orchestrator.analyze(
            video_path=video,
            section=section,
            time_of_day=time_of_day,
            crowd_density=crowd_density,
            use_keyframes=keyframes
        )
        
        if result:
            self._display_result_summary(result)
        else:
            print("‚ùå √âchec de l'analyse")
    
    def analyze_all_videos(self):
        """Analyse toutes les vid√©os disponibles avec des param√®tres al√©atoires."""
        if not self.video_files:
            print("‚ùå Aucune vid√©o disponible")
            return
        
        import random
        
        sections = ["Rayon cosm√©tique", "Entr√©e principale", "Caisse", "Rayon √©lectronique"]
        times = ["Matin", "Apr√®s-midi", "Soir√©e"]
        densities = ["faible", "mod√©r√©e", "dense"]
        
        print(f"üé¨ ANALYSE DE TOUTES LES VID√âOS ({len(self.video_files)})")
        print("=" * 60)
        
        if not self.orchestrator:
            self.orchestrator = SurveillanceOrchestrator()
        
        results = []
        
        for i, video in enumerate(self.video_files, 1):
            print(f"\nüìπ Analyse {i}/{len(self.video_files)}: {video.name}")
            
            # Param√®tres al√©atoires pour la diversit√©
            section = random.choice(sections)
            time_of_day = random.choice(times)
            crowd_density = random.choice(densities)
            keyframes = random.choice([True, False])
            
            result = self.orchestrator.analyze(
                video_path=video,
                section=section,
                time_of_day=time_of_day,
                crowd_density=crowd_density,
                use_keyframes=keyframes
            )
            
            if result:
                results.append(result)
                decision = result['decision']
                print(f"   R√©sultat: {decision['suspicion_level']} - {decision['alert_type']}")
            else:
                print("   ‚ùå √âchec")
        
        # R√©sum√© final
        print(f"\nüìä R√âSUM√â GLOBAL")
        print("-" * 30)
        print(f"Vid√©os analys√©es: {len(results)}/{len(self.video_files)}")
        
        if results:
            suspicion_counts = {}
            for result in results:
                level = result['decision']['suspicion_level']
                suspicion_counts[level] = suspicion_counts.get(level, 0) + 1
            
            for level, count in suspicion_counts.items():
                print(f"{level.capitalize()}: {count}")
    
    def switch_model(self):
        """Permet de changer de mod√®le VLM."""
        print("üîÑ CHANGEMENT DE MOD√àLE")
        print("-" * 30)
        
        models = get_available_models()
        available_models = []
        
        print("Mod√®les disponibles:")
        for i, (model_id, info) in enumerate(models.items(), 1):
            status = "‚úÖ" if info["enabled"] and info["available"] else "‚ùå"
            primary = " (ACTUEL)" if info["is_primary"] else ""
            print(f"{i}. {status} {info['name']}{primary}")
            if info["enabled"] and info["available"]:
                available_models.append(model_id)
        
        if len(available_models) <= 1:
            print("‚ö†Ô∏è  Un seul mod√®le disponible, aucun changement possible.")
            return
        
        try:
            choice = int(input("\nChoisissez un mod√®le (num√©ro): "))
            model_ids = list(models.keys())
            
            if 1 <= choice <= len(model_ids):
                selected_model = model_ids[choice - 1]
                
                if selected_model == "kim":
                    if self.orchestrator:
                        success = self.orchestrator.switch_to_kim()
                        if success:
                            print("‚úÖ Basculement vers KIM r√©ussi")
                        else:
                            print("‚ùå Impossible de basculer vers KIM")
                    else:
                        print("‚ö†Ô∏è  Orchestrateur non initialis√©")
                
                elif selected_model == "smolvlm":
                    if self.orchestrator:
                        self.orchestrator.switch_to_smolvlm()
                        print("‚úÖ Basculement vers SmolVLM")
                    else:
                        settings.set_primary_vlm(ModelType.SMOLVLM)
                        print("‚úÖ SmolVLM d√©fini comme principal")
            else:
                print("‚ùå Choix invalide")
                
        except ValueError:
            print("‚ùå Veuillez entrer un num√©ro valide")
    
    def show_statistics(self):
        """Affiche les statistiques du syst√®me."""
        print("üìä STATISTIQUES SYST√àME")
        print("-" * 30)
        
        if self.orchestrator:
            stats = self.orchestrator.get_session_stats()
            memory_stats = self.orchestrator.memory.get_statistics()
            
            print("Session actuelle:")
            print(f"  Analyses: {stats['analyses_count']}")
            print(f"  Alertes: {stats['alerts_count']}")
            print(f"  Taux d'alerte: {stats['alert_rate']}%")
            print(f"  Dur√©e session: {stats['session_duration']}")
            print(f"  Changements de mod√®le: {stats['model_switches']}")
            
            print("\nM√©moire globale:")
            print(f"  Total analyses: {memory_stats.get('total_analyses', 0)}")
            print(f"  Total alertes: {memory_stats.get('total_alerts', 0)}")
        else:
            print("‚ö†Ô∏è  Aucune session active")
    
    def test_capabilities(self):
        """Test des capacit√©s syst√®me."""
        print("üß™ TEST DES CAPACIT√âS")
        print("-" * 30)
        
        # Test GPU
        try:
            import torch
            if torch.cuda.is_available():
                gpu_name = torch.cuda.get_device_name(0)
                gpu_memory = torch.cuda.get_device_properties(0).total_memory / (1024**3)
                print(f"‚úÖ GPU: {gpu_name} ({gpu_memory:.1f}GB)")
            else:
                print("‚ùå Pas de GPU CUDA disponible")
        except ImportError:
            print("‚ùå PyTorch non install√©")
        
        # Test des mod√®les
        print("\nTest des mod√®les:")
        try:
            from src.models import create_vlm_model, create_llm_model
            
            vlm = create_vlm_model()
            print(f"‚úÖ VLM: {type(vlm).__name__}")
            
            llm = create_llm_model()
            print(f"‚úÖ LLM: {type(llm).__name__}")
            
        except Exception as e:
            print(f"‚ùå Erreur mod√®les: {e}")
        
        # Test preprocessing
        print(f"\nVid√©os de test: {len(self.video_files)}")
    
    def _display_result_summary(self, result: dict):
        """Affiche un r√©sum√© du r√©sultat d'analyse."""
        decision = result['decision']
        metadata = result['metadata']
        
        print(f"\n‚úÖ ANALYSE TERMIN√âE")
        print(f"Dur√©e: {metadata['analysis_duration']:.2f}s")
        print(f"Mod√®le: {metadata['model_used']}")
        print()
        print(f"üéØ D√âCISION: {decision['suspicion_level'].upper()}")
        print(f"Type: {decision['alert_type']}")
        print(f"Action: {decision['action']}")
        print(f"Confiance: {decision['confidence']:.2f}")
        print()
        print(f"üí≠ Raisonnement:")
        print(f"   {decision['reasoning']}")
        
        # Affichage des d√©tails d'analyse si disponibles
        if 'vlm_result' in result and result['vlm_result']:
            vlm_result = result['vlm_result']
            print(f"\nüîç ANALYSE VLM D√âTAILL√âE:")
            print("=" * 40)
            if hasattr(vlm_result, 'thinking') and vlm_result.thinking:
                print(f"üí≠ R√©flexion du mod√®le:")
                print(f"   {vlm_result.thinking}")
                print()
            if hasattr(vlm_result, 'summary') and vlm_result.summary:
                print(f"üìã R√©sum√© VLM:")
                print(f"   {vlm_result.summary}")
                print()
            if hasattr(vlm_result, 'raw_output') and vlm_result.raw_output and vlm_result.raw_output != vlm_result.summary:
                print(f"ü§ñ Sortie brute du mod√®le:")
                print(f"   {vlm_result.raw_output[:500]}{'...' if len(vlm_result.raw_output) > 500 else ''}")
                print()
        
        if 'llm_result' in result and result['llm_result']:
            llm_result = result['llm_result']
            print(f"\nüß† ANALYSE LLM D√âTAILL√âE:")
            print("=" * 40)
            if hasattr(llm_result, 'thinking') and llm_result.thinking:
                print(f"üí≠ R√©flexion du mod√®le:")
                print(f"   {llm_result.thinking}")
                print()
            if hasattr(llm_result, 'raw_output') and llm_result.raw_output:
                print(f"ü§ñ Sortie brute du mod√®le:")
                print(f"   {llm_result.raw_output[:500]}{'...' if len(llm_result.raw_output) > 500 else ''}")
                print()
    
    def run(self):
        """Lance la d√©monstration interactive."""
        self.display_welcome()
        
        while True:
            try:
                self.display_menu()
                choice = input("Votre choix (1-6): ").strip()
                
                if choice == "1":
                    self.analyze_single_video()
                elif choice == "2":
                    self.analyze_all_videos()
                elif choice == "3":
                    self.switch_model()
                elif choice == "4":
                    self.show_statistics()
                elif choice == "5":
                    self.test_capabilities()
                elif choice == "6":
                    break
                else:
                    print("‚ùå Choix invalide. Essayez encore.")
                
                input("\n‚ñ∂Ô∏è  Appuyez sur Entr√©e pour continuer...")
                print("\n" + "="*80)
                
            except KeyboardInterrupt:
                print("\n\nüëã Au revoir!")
                break
            except Exception as e:
                logger.error(f"Erreur dans la d√©mo: {e}")
                print(f"‚ùå Erreur: {e}")
        
        # Nettoyage
        if self.orchestrator:
            self.orchestrator.cleanup()


def main():
    """Fonction principale."""
    demo = SurveillanceDemo()
    demo.run()


if __name__ == "__main__":
    main()