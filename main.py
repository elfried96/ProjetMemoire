#!/usr/bin/env python3
"""
Point d'entr√©e principal du Surveillance Orchestrator.
Syst√®me de surveillance intelligente utilisant des mod√®les VLM et LLM.
"""

import sys
import argparse
from pathlib import Path

from src.orchestrator.controller import SurveillanceOrchestrator
from src.config import settings
from src.utils.logging import get_surveillance_logger
from src.models import get_available_models


def setup_argument_parser() -> argparse.ArgumentParser:
    """Configure l'analyseur d'arguments de ligne de commande."""
    parser = argparse.ArgumentParser(
        description="Surveillance Orchestrator - Analyse intelligente de vid√©os de surveillance",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    
    parser.add_argument(
        "video_path", 
        type=str,
        help="Chemin vers la vid√©o √† analyser"
    )
    
    parser.add_argument(
        "--section", 
        type=str, 
        default="Rayon cosm√©tique",
        help="Section du magasin surveill√©e"
    )
    
    parser.add_argument(
        "--time-of-day", 
        type=str, 
        default="Fin d'apr√®s-midi",
        help="Moment de la journ√©e (ex: Matin, Apr√®s-midi, Soir√©e)"
    )
    
    parser.add_argument(
        "--crowd-density", 
        type=str, 
        default="dense",
        choices=["faible", "mod√©r√©e", "dense"],
        help="Densit√© de la foule"
    )
    
    parser.add_argument(
        "--keyframes", 
        action="store_true",
        help="Utiliser l'extraction de keyframes intelligente"
    )
    
    parser.add_argument(
        "--model", 
        type=str,
        choices=["smolvlm", "kim"],
        help="Force l'utilisation d'un mod√®le sp√©cifique"
    )
    
    parser.add_argument(
        "--list-models", 
        action="store_true",
        help="Affiche les mod√®les disponibles et quitte"
    )
    
    parser.add_argument(
        "--verbose", "-v", 
        action="store_true",
        help="Active le mode verbeux"
    )
    
    parser.add_argument(
        "--batch-size",
        type=int,
        help="Taille des lots pour le traitement (surcharge la config)"
    )
    
    return parser


def display_available_models():
    """Affiche les mod√®les disponibles."""
    print("\nü§ñ MOD√àLES DISPONIBLES:")
    print("=" * 50)
    
    models = get_available_models()
    
    for model_id, info in models.items():
        status_icon = "‚úÖ" if info["enabled"] and info["available"] else "‚ùå"
        primary_icon = "üéØ" if info["is_primary"] else "  "
        
        print(f"{status_icon} {primary_icon} {info['name']}")
        print(f"      ID: {info['model_id']}")
        print(f"      Activ√©: {'Oui' if info['enabled'] else 'Non'}")
        print(f"      Disponible: {'Oui' if info['available'] else 'Non'}")
        print()


def display_result(result: dict):
    """Affiche le r√©sultat d'analyse de mani√®re format√©e."""
    print("\n" + "="*80)
    print("üß† R√âSULTAT DE L'ANALYSE DE SURVEILLANCE")
    print("="*80)
    
    # M√©tadonn√©es
    print(f"üìç Section: {result['section']}")
    print(f"üïê Timestamp: {result['timestamp']}")
    print(f"‚ö° Dur√©e: {result['metadata']['analysis_duration']:.2f}s")
    print(f"ü§ñ Mod√®le utilis√©: {result['metadata']['model_used']}")
    
    # Analyse VLM
    if result.get('thinking'):
        print(f"\nüß† R√âFLEXION DU VLM:")
        print("-" * 40)
        print(result['thinking'])
    
    print(f"\nüìä DESCRIPTION DE LA SC√àNE:")
    print("-" * 40)
    print(result['summary'])
    
    # D√©cision LLM
    decision = result['decision']
    print(f"\n‚öñÔ∏è  D√âCISION DE L'ORCHESTRATEUR:")
    print("-" * 40)
    print(f"Niveau de suspicion: {decision['suspicion_level'].upper()}")
    print(f"Type d'alerte: {decision['alert_type']}")
    print(f"Action recommand√©e: {decision['action']}")
    print(f"Confiance: {decision['confidence']:.2f}")
    
    print(f"\nüí≠ RAISONNEMENT:")
    print(decision['reasoning'])
    
    if decision.get('recommended_tools'):
        print(f"\nüõ†Ô∏è  OUTILS RECOMMAND√âS:")
        for tool in decision['recommended_tools']:
            print(f"  ‚Ä¢ {tool}")
    
    # Indicateur de risque
    risk_level = decision['suspicion_level']
    if risk_level == "high":
        print(f"\nüö® ATTENTION: NIVEAU DE RISQUE √âLEV√â!")
    elif risk_level == "medium":
        print(f"\n‚ö†Ô∏è  Surveillance renforc√©e recommand√©e")
    else:
        print(f"\n‚úÖ Situation normale")
    
    print("="*80)


def main():
    """Fonction principale."""
    parser = setup_argument_parser()
    args = parser.parse_args()
    
    # Configuration du logging
    if args.verbose:
        settings.config.log_level = "DEBUG"
    
    logger = get_surveillance_logger()
    
    # Affichage des mod√®les et sortie
    if args.list_models:
        display_available_models()
        return 0
    
    # Validation du chemin vid√©o
    video_path = Path(args.video_path)
    if not video_path.exists():
        print(f"‚ùå Erreur: La vid√©o '{video_path}' n'existe pas.")
        return 1
    
    try:
        logger.info("üé¨ D√©marrage du Surveillance Orchestrator")
        logger.info(f"Version Python: {sys.version}")
        
        # Configuration optionnelle
        if args.batch_size:
            settings.config.batch_size = args.batch_size
            logger.info(f"Taille de lot configur√©e: {args.batch_size}")
        
        # S√©lection du mod√®le si sp√©cifi√©
        if args.model:
            from src.config import ModelType
            if args.model == "smolvlm":
                settings.set_primary_vlm(ModelType.SMOLVLM)
                logger.info("Mod√®le forc√©: SmolVLM")
            elif args.model == "kim":
                if settings.get_model_config(ModelType.KIM).enabled:
                    settings.set_primary_vlm(ModelType.KIM)
                    logger.info("Mod√®le forc√©: KIM")
                else:
                    logger.warning("KIM n'est pas activ√©, utilisation de SmolVLM")
        
        # Affichage de la configuration
        print(f"\nüéØ ANALYSE EN COURS...")
        print(f"üìπ Vid√©o: {video_path.name}")
        print(f"üìç Section: {args.section}")
        print(f"üïê Moment: {args.time_of_day}")
        print(f"üë• Affluence: {args.crowd_density}")
        print(f"üéûÔ∏è  Mode: {'Keyframes' if args.keyframes else 'Frames r√©guli√®res'}")
        print(f"ü§ñ VLM principal: {settings.config.primary_vlm.value}")
        
        # Initialisation de l'orchestrateur
        orchestrator = SurveillanceOrchestrator()
        
        # Analyse de la vid√©o
        result = orchestrator.analyze(
            video_path=video_path,
            section=args.section,
            time_of_day=args.time_of_day,
            crowd_density=args.crowd_density,
            use_keyframes=args.keyframes
        )
        
        if result:
            display_result(result)
            
            # Affichage des statistiques de session
            stats = orchestrator.get_session_stats()
            print(f"\nüìä STATISTIQUES DE SESSION:")
            print(f"Analyses: {stats['analyses_count']}")
            print(f"Alertes: {stats['alerts_count']}")
            print(f"Taux d'alerte: {stats['alert_rate']}%")
            
            return 0
        else:
            print("‚ùå L'analyse a √©chou√©.")
            return 1
            
    except KeyboardInterrupt:
        logger.info("Interruption par l'utilisateur")
        return 130
    except Exception as e:
        logger.error(f"Erreur inattendue: {e}")
        return 1
    finally:
        # Nettoyage
        try:
            if 'orchestrator' in locals():
                orchestrator.cleanup()
        except:
            pass


if __name__ == "__main__":
    exit(main())